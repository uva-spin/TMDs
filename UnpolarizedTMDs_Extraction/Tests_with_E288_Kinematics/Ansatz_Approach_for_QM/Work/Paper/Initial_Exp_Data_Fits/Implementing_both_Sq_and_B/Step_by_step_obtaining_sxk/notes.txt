
Here we call the trained models for Sq(qT,x1,x2) and trying to obtain two separate s(x,k) 
one for target and one for beam: s(x1,k) and s(x2,k')

Test_1:
Based on the trained models to the cross-section data, we generate the SqT values for a grid with
Fixed x2 and vary x1 and qT from the values in data files.
Then, Trained the sub-models n1 and n2 for target/beam
Then, generated csv files for SqT to compare with the trained data and a grid for n1
Then, generated plots


Test_2
Hidden_Layers = 3
Nodes_per_HL = 100
NUM_REPLICAS = 50

Test_3
What we want to do Here:
1. Fix qT to let's say 0.5.
2. Sample over x1 and x2 where x1,x2 = {0.1-0.3}
3. Plot n1(x1,k) and n2(x2,k')

Test_4
Same as Test_3

Test_5
Dustin's code with 1000 epochs included timing

Test_6
Test_5 with 2000 epochs

Test_7
Test_6 with
def make_dnn(name):
    inputs = tf.keras.Input(shape=(2,), name=f"{name}_input")  # [x, k]
    x = tf.keras.layers.Dense(64, activation='tanh')(inputs)
    x = tf.keras.layers.Dense(64, activation='tanh')(x)
    outputs = tf.keras.layers.Dense(1, activation='softplus')(x)
    return tf.keras.Model(inputs, outputs, name=name)
with 500 points
Duration at Epoch 900 --> 0:39:43
Epoch 950, Loss: nan
Duration at Epoch 950 --> 0:41:58

So reduced to 300 points


Test_8
Test_7 with 4000 epochs

Test_9
# Define DNNs NN_a(x_a, k) and NN_b(x_b, k)
def make_dnn(name):
    inputs = tf.keras.Input(shape=(2,), name=f"{name}_input")  # [x, k]
    x = tf.keras.layers.Dense(64, activation='relu6')(inputs)
    x = tf.keras.layers.Dense(64, activation='tanh')(x)
    outputs = tf.keras.layers.Dense(1, activation='softplus')(x)
    return tf.keras.Model(inputs, outputs, name=name)
4000 epochs

Test_10 
Implemented a predicting layer for S_qT_prediction
Used 300 data points and 4000 epochs and it took about 8 mins  and 30 seconds, whereas
Test_9 took about 1 hr 45 mins

Test_11
Test_10 with 1000 data points and 10000 epochs (should be around 20 mins)
qT range increased to 5 GeV
1000 data points crashed: not enough memory so reduced to 500 for training
This is the best model so far





